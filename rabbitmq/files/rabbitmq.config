{%- from "rabbitmq/map.jinja" import server with context -%}
[
    {rabbit, [{vm_memory_high_watermark, {{ server.memory.vm_high_watermark }}},
              {memory_alarms, true},
              {disk_free_limit, {{ server.disk_free_limit }}},
              {%- if pillar.rabbitmq.cluster is defined %}
              {%- from "rabbitmq/map.jinja" import cluster with context %}
              {cluster_partition_handling, autoheal},
              {tcp_listen_options,
                        [binary,
                          {packet, raw},
                          {reuseaddr, true},
                          {backlog, 128},
                          {nodelay, true},
                          {exit_on_close, false},
                          {keepalive, true}
                         ]
              },
              {cluster_nodes, {[{% for node in cluster.members %}'rabbit@{{ node.name }}'{% if not loop.last %}, {% endif %}{% endfor %}], {{ cluster.mode }}}},
              {%- endif %}
              {loopback_users, []},
              {collect_statistics_interval, {{ server.collect_statistics_interval }}},
              {tcp_listeners, [{"{{ server.bind.address }}",{{ server.bind.port }}}]}
              {%- if server.get('ssl', {}).get('enabled', False) %},
              {ssl_listeners, [{"{{ server.bind.get('ssl', {}).get('address', server.bind.address) }}",{{ server.bind.get('ssl', {}).get('port', 5671) }}}]},
              {ssl_options, [{cacertfile,"{{ server.ssl.get('ca_file', '/etc/rabbitmq/ssl/cacert.pem') }}"},
                             {certfile,"{{ server.ssl.get('cert_file', '/etc/rabbitmq/ssl/cert.pem') }}"},
                             {keyfile,"{{ server.ssl.get('key_file', '/etc/rabbitmq/ssl/key.pem') }}"},
                             {verify,verify_{{ server.ssl.get('verify', 'peer') }}},
                             {versions, [{% if server.ssl.versions is defined %}{% for version in server.ssl.versions %}'{{ version }}'{% if not loop.last %},{% endif %}{% endfor %}{% else %}'tlsv1.2', 'tlsv1.1'{% endif %}]},
                             {%- if server.ssl.ciphers is defined %}
                             {ciphers,[{% for ciph in server.ssl.ciphers %}{ {{ ciph }} }{% if not loop.last %},{% endif %}{% endfor %}]},
                             {%- endif %}
                             {fail_if_no_peer_cert,false}]
              }
              {% endif %}
             ]
    }
    {%- if 'rabbitmq_management' in server.plugins %},
    {rabbitmq_management,
              [{dummy_param_that_will_be_ignored, {but_itll_allow_easy_options_reordering, without_bothering_with_commas}}
              ,{rates_mode, {{ server.rates_mode }}}
              ,{listener, [{port, {{ server.management.bind.port }} },
                           {ip, "{{ server.management.bind.address }}" }
                           {%- if server.management.get('ssl', {}).get('enabled', False) %},
                           {ssl,true},
                           {ssl_opts, [{cacertfile,"{{ server.management.ssl.get('ca_file', '/etc/rabbitmq/ssl/cacert.pem') }}"},
                                       {certfile,"{{ server.management.ssl.get('cert_file', '/etc/rabbitmq/ssl/cert.pem') }}"},
                                       {keyfile,"{{ server.management.ssl.get('key_file', '/etc/rabbitmq/ssl/key.pem') }}"},
                                       {%- if server.ssl.ciphers is defined %}
                                       {ciphers,[{% for ciph in server.ssl.ciphers %}{ {{ ciph }} }{% if not loop.last %},{% endif %}{% endfor %}]},
                                       {%- endif %}
                                       {versions, [{% if server.ssl.versions is defined %}{% for version in server.ssl.versions %}'{{ version }}'{% if not loop.last %},{% endif %}{% endfor %}{% else %}'tlsv1.2', 'tlsv1.1'{% endif %}]}]}
                           {%- endif %}
                          ]
              }]
    }
    {%- endif %}
].
{#-
vim: syntax=jinja
#}
